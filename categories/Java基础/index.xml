<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on Language</title>
    <link>http://localhost:1313/Lang/categories/Java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on Language</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 Jun 2023 10:14:03 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/Lang/categories/Java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Feature</title>
      <link>http://localhost:1313/Lang/docs/Java/core/javaFeature/</link>
      <pubDate>Sat, 10 Jun 2023 10:14:03 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/javaFeature/</guid>
      <description>版本 # 版本 发布日期 JDK 19 2022/09/20 JDK 20 2023/03/21 版本+特性 [1] # Java 1.4 # NIO（New I/O） Java 5（Java 1.5） # 泛型 自动装箱/拆箱 枚举类型 Java 7 # Try-with-resources Java SE 8（Java 8）- LTS长期支持版本 # Lambda 表达式：简化函数式编程。允许以更简洁的语法编写函数式接口的实例，使代码更加简洁。 Stream API：用于处理集合，支持函数式操作，如过滤、映射和聚合。 方法引用：允许直接引用现有方法或构造函数，避免了重复编写类似的代码。 接口的默认方法：在接口中提供默认实现，提高接口的灵活性。 时间 API：提供了一组强大的时间操作类，简化了日期和时间的操作。 重复注解：允许在同一个地方多次声明同一个注解，提高了代码的可读性。 CompletableFuture 类：简化异步编程，提供更好的错误处理和异常处理机制。 Nashorn 引擎：提供了一种基于 JavaScript 的解决方案，允许将 JavaScript 代码嵌入到 Java 应用程序中。 Optional 类：减少空指针异常，提高代码可读性。 Java SE 9（Java 9） # 模块系统（Project Jigsaw）：将 Java 的庞大代码库划分为可重用的模块，简化大型应用的构建和维护。 JShell：Java 的交互式命令行工具，用于快速尝试和测试 Java 代码片段。 新的集合工厂方法：方便地创建不可变集合，如 List.</description>
    </item>
    <item>
      <title>JVM性能调优</title>
      <link>http://localhost:1313/Lang/docs/Java/other/optimize/</link>
      <pubDate>Mon, 27 Nov 2017 09:58:10 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/other/optimize/</guid>
      <description>参考 # 从实际案例聊聊Java应用的GC优化 录录</description>
    </item>
    <item>
      <title>Java集合总结</title>
      <link>http://localhost:1313/Lang/docs/Java/core/collection/</link>
      <pubDate>Wed, 03 Dec 2014 14:32:20 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/collection/</guid>
      <description>&#xA;参考： # JDK Collection 源代码 关于Java集合的小抄 白衣 限流系统如何发现系统的热点 阿里中间件团队博客 不正当使用HashMap导致cpu 100%的问题追究 王宏江 并发环境下HashMap引起的full gc排查 ol_beta 不止JDK7的HashMap，JDK8的ConcurrentHashMap也会造成CPU 100% 朱小厮 朱忠华 </description>
    </item>
    <item>
      <title>AOP总结</title>
      <link>http://localhost:1313/Lang/docs/Java/core/aop/</link>
      <pubDate>Fri, 21 Nov 2014 14:25:58 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/aop/</guid>
      <description>参考: # 1.AOP技术讨论 乒乓狂魔 2.AOP 那点事儿 黄勇 3.AOP 那点事儿（续集） 黄勇 4.AOP实现机制 fantasy 5.动态代理方案性能对比 javatar 6.Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM） 亦山 7.Spring事务处理时自我调用的解决方案及一些实现方式的风险 张开涛</description>
    </item>
    <item>
      <title>Classloader总结</title>
      <link>http://localhost:1313/Lang/docs/Java/core/classloaderSummarize/</link>
      <pubDate>Tue, 12 Aug 2014 14:11:26 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/classloaderSummarize/</guid>
      <description>&#xA;参考: # 深入浅出ClassLoader 你真的了解ClassLoader吗？ 魏 鹏 class卸载、热替换和Tomcat的热部署的分析 heavensay 《实战Java虚拟机》 第10章 </description>
    </item>
    <item>
      <title>垃圾收集GC总结</title>
      <link>http://localhost:1313/Lang/docs/Java/core/gc/</link>
      <pubDate>Wed, 16 Jul 2014 14:05:43 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/gc/</guid>
      <description>&#xA;并发标记算法 # CMS： 三色标记算法 + 增量更新（Incremental update） G1： 三色标记算法 + STAB（snapshot-at-the-beginning） Java虚拟机 &amp;mdash;-三色标记与G1垃圾回收器 参考： # 源码分析：Java对象的内存分配 iceAeterna 《深入理解Java虚拟机（第2版）》 第3章 周志明 深入理解GC ——MinorGC\MajorGC\FullGC 张硕的博客 触发JVM进行Full GC的情况及应对策略 yexx Netty之有效规避内存泄漏 江南白衣 周期性Full GC的异常排查 weiplex 一个大对象引起的血案，GC的踩坑实录 何锦彬 生产环境下持久带满导致FullGC，如何跟踪 又是一个程序员粗心的代码引起频繁FullGC的案例 微信公众号里的 JVM初探- 使用堆外内存减少Full GC 菜鸟-翡青 我遇到tomcat 7 full gc频繁的问题 auzll 一次堆外OOM问题的排查过程 谢照东 占小狼的博客 美团三面：一个线程OOM，进程里其他线程还能运行么？ 孤独烟 Java技术驿站 netty 堆外内存泄露排查盛宴 闪电侠的博客 netty的bug 线上故障排查(2) - Java应用故障之堆溢出OOM问题及排查方案 冯立彬 未 </description>
    </item>
    <item>
      <title>线程池最佳线程数</title>
      <link>http://localhost:1313/Lang/docs/Java/concurrent/threadNum/</link>
      <pubDate>Wed, 02 Jul 2014 12:35:36 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/concurrent/threadNum/</guid>
      <description>最佳实践: 曾经遇到过任务被丢给线程池之后，长时间都没有被执行的诡异问题。最初，我认为这是代码的 Bug 导致的，后来经过排查发现，是因为线程池的coreThreadCount 和 maxThreadCount 设置的比较小，导致任务在线程池里面大量的堆积，在调大了这两个参数之后问题就解决了.&#xA;参考: # 工作线程数究竟要设置为多少 架构师之路 蚂蚁金服技术专家总结：性能优化的常见招式 jurassic_1 《Java 并发编程实践》 8.2定制线程池的大小 Brian Goetz 高并发系统设计40问 - 07 | 池化技术：如何减少频繁创建数据库连接的性能损耗？ 唐扬 ​</description>
    </item>
    <item>
      <title>多线程中的volatile和CAS</title>
      <link>http://localhost:1313/Lang/docs/Java/concurrent/volatile-CAS/</link>
      <pubDate>Mon, 02 Jun 2014 12:24:27 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/concurrent/volatile-CAS/</guid>
      <description>&#xA;参考: # Java 理论与实践: 正确使用 Volatile 变量 从volatile解读ConcurrentHashMap（jdk1.6.0）无锁读 为什么volatile不能保证原子性而Atomic可以 阿里巴巴Java开发手册 非阻塞同步算法与CAS(Compare and Swap)无锁算法 非阻塞算法在并发容器中的实现 程晓明 </description>
    </item>
    <item>
      <title>多线程中的锁</title>
      <link>http://localhost:1313/Lang/docs/Java/concurrent/lock/</link>
      <pubDate>Tue, 27 May 2014 12:20:45 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/concurrent/lock/</guid>
      <description>&#xA;参考 # 《java并发编程实践》 13章 显示锁 ,13.5 读-写锁 轻松学习java可重入锁(ReentrantLock)的实现原理 锁模式 -&amp;gt; 共享锁，排他锁 轻松掌握java读写锁(ReentrantReadWriteLock)的实现原理 Java中的读/写锁 作者:Jakob Jenkov Java同步块 作者:Jakob Jenkov 《Java并发编程的艺术》-Java并发包中的读写锁及其实现分析 怎么理解Condition 码梦为生|刘锟洋 多线程之：偏向锁，轻量级锁，重量级锁 无信不立 </description>
    </item>
    <item>
      <title>Java多线程总结</title>
      <link>http://localhost:1313/Lang/docs/Java/concurrent/thread/</link>
      <pubDate>Mon, 21 Apr 2014 12:11:33 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/concurrent/thread/</guid>
      <description>&#xA;参考： # 非阻塞同步算法与CAS(Compare and Swap)无锁算法 高性能队列——Disruptor java多线程体系 东隼 《并发编程实践》 Brian Goetz 第3章 Java并发之AQS详解 waterystone 面试官：线程顺序执行,这么多答案你都答不上来？ Join, wait, Condition, 线程池 </description>
    </item>
    <item>
      <title>Java多线程中的取消和关闭</title>
      <link>http://localhost:1313/Lang/docs/Java/concurrent/cancelAndShutdown/</link>
      <pubDate>Wed, 09 Apr 2014 11:20:13 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/concurrent/cancelAndShutdown/</guid>
      <description>&#xA;取消和关闭 基础 中断状态 中断请求 取消点 任务取消 取消策略（how/when/what） how/when volatile的取消状态+非阻塞方法(正确) volatile的取消状态+阻塞方法(错误) 中断的状态显示的检查（正确）.Thread.currentThread().isInterrupted() what, 中断策略（如何响应中断请求） InterruptedException传递给调用者，捕获后恢复中断的状态，Thread.currentThread().interrupted(). 封装成shutdown方法 通过Future.cancel来取消任务 中断当前线程 阻塞函数 抛出InterruptedException Thread.isInterrupted()返回false eg. Object的wait(),Thread的join(),sleep() IO上的阻塞 BIO Socket读写网络 JDBC驱动MySQL-connector-java nio InterruptibleChannel InterruptibleChannel将被关闭 抛出ClosedByInterruptException Thread.isInterrupted()返回true Selector Selector#select()方法将立即返回 不会抛出异常 Thread.isInterrupted()返回true 服务取消 生命周期方法 start() stop() ExceuteService.shutDown()/shutDownNow() 致命药丸(akka的Poison Pill) 锁中断 不可中断 内部锁synchronized, ReentrantLock.lock() 可中断 显示锁ReentrantLock.tryLock()，.lockInterruptibly() </description>
    </item>
    <item>
      <title>Java 字符串</title>
      <link>http://localhost:1313/Lang/docs/Java/core/javaString/</link>
      <pubDate>Mon, 20 Jan 2014 19:50:41 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/javaString/</guid>
      <description></description>
    </item>
    <item>
      <title>Java内存模型</title>
      <link>http://localhost:1313/Lang/docs/Java/core/javaMemoryModel/</link>
      <pubDate>Fri, 03 Jan 2014 22:14:27 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/javaMemoryModel/</guid>
      <description>&#xA;参考: # JVM内部原理 原文作者：James D Bloom 翻译：梅小西 浅谈HotSpot逃逸分析 占小狼 class卸载、热替换和Tomcat的热部署的分析 heavensay java自定义classloader引发的思考 editice 《深入理解java虚拟机》 第二章 周志明 浅谈Java String内幕 占小狼 JMM和底层实现原理 王侦 *** 未 </description>
    </item>
    <item>
      <title>Java并发容器总结</title>
      <link>http://localhost:1313/Lang/docs/Java/concurrent/concurrentCollection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/concurrent/concurrentCollection/</guid>
      <description>&#xA;参考: # 关于Java集合的小抄 白衣 谈谈ConcurrentHashMap1.7和1.8的不同实现 占小狼 高性能队列——Disruptor 非阻塞算法在并发容器中的实现 程晓明 从volatile解读ConcurrentHashMap（jdk1.6.0）无锁读 绫萱 JAVA并发容器代码随读 BucketLi 聊聊并发（四）深入分析ConcurrentHashMap 方 腾飞 Java8 新特性之流式数据处理 深蓝至尊 不止JDK7的HashMap，JDK8的ConcurrentHashMap也会造成CPU 100% 朱小厮 朱忠华 </description>
    </item>
  </channel>
</rss>
