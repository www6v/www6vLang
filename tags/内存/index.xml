<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内存 on Language</title>
    <link>http://localhost:1313/Lang/tags/%E5%86%85%E5%AD%98/</link>
    <description>Recent content in 内存 on Language</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Feb 2014 10:26:27 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/Lang/tags/%E5%86%85%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java内存泄漏的案例和解决方案</title>
      <link>http://localhost:1313/Lang/docs/Java/core/javaMemoryLeak/</link>
      <pubDate>Sun, 02 Feb 2014 10:26:27 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/javaMemoryLeak/</guid>
      <description>如果一个可达对象的生命周期很长，它有一个生命周期较短的对象引用，此时就可能出现Java内存泄漏。也即是说， 造成内存泄漏的原因是对象虽然可达但不是活动的。&#xA;避免内存泄漏的三种方式 # 1. 软引用 # 对于缓存，如果没有合适的策略让老的缓存项目到期就可能遇到内存泄漏。&#xA;我们希望缓存能用上所有的可用内存，只是在需要额外资源的时候才释放资源。 通过软可达可以实现资源的释放。&#xA;释放软可达对象的规则：&#xA;I. gc抛出OOM异常之前要尝试释放软引用&#xA;II. gc以LRU的顺序释放软引用&#xA;举例：&#xA;Google LoadingCache中的CacheBuilder.softValues()&#xA;2. 弱引用 # 弱引用可以用于协助垃圾回收， 这是通用的解决方案。&#xA;举例： threadLocal&#xA;每个线程中有一个Map, 这个Map的类型是ThreadLocal.ThreadLocalMap. Map中的key为一个threadlocal实例. 这个Map的key使用了弱引用。 每个key都弱引用指向threadlocal. 当把threadlocal实例置为null以后,没有任何强引用指向threadlocal实例,所以threadlocal将会被gc回收.&#xA;ps: value却不能回收,因为存在一条从current thread连接过来的强引用. 只有当前thread结束以后, current thread就不会存在栈中,强引用断开, Current Thread, Map, value将全部被GC回收. 如果使用线程池，线程的强引用会长时间的存在，为了防止内存泄漏，最好的做法是将调用threadlocal的remove方法。&#xA;3. 打开(增加)和关闭（删除）方法成对出现 # 资源申请和回收不成对会使资源没释放，造成内存泄漏。&#xA;举例：&#xA;I. 在finally块中关闭打开的资源和异常处理。&#xA;II. 使用try-with-resources语句（Java SE7新特性）&#xA;try (BufferedReader br = new BufferedReader(new FileReader(path))) {&#xD;return br.readLine();&#xD;} 内存泄漏案例 # &amp;laquo;实战Java虚拟机——JVM故障诊断与性能优化&amp;raquo; 7.2.2节中有关JDK6.0里String.substring()可能引发的内存泄漏&#xA;&amp;laquo; Effective.Java.中文版 - 第二版&amp;raquo; - 第六条 消除过期的对象引用 如果一个类自己管理内存，程序员就要警惕内存泄漏问题。</description>
    </item>
    <item>
      <title>Java内存模型</title>
      <link>http://localhost:1313/Lang/docs/Java/core/javaMemoryModel/</link>
      <pubDate>Fri, 03 Jan 2014 22:14:27 +0000</pubDate>
      <guid>http://localhost:1313/Lang/docs/Java/core/javaMemoryModel/</guid>
      <description>&#xA;参考: # JVM内部原理 原文作者：James D Bloom 翻译：梅小西 浅谈HotSpot逃逸分析 占小狼 class卸载、热替换和Tomcat的热部署的分析 heavensay java自定义classloader引发的思考 editice 《深入理解java虚拟机》 第二章 周志明 浅谈Java String内幕 占小狼 JMM和底层实现原理 王侦 *** 未 </description>
    </item>
  </channel>
</rss>
